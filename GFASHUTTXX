r3.fromHSV(hue, 1, 1)
            end
        end
    end
end)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Lighting = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

-- Optimize Lighting for FPS boost
Lighting.GlobalShadows = false
Lighting.FogEnd = 100000
Lighting.Brightness = 2
Lighting.OutdoorAmbient = Color3.new(1, 1, 1)

-- Create (or get) the RemoteEvent for shooting
local ShootEvent = ReplicatedStorage:FindFirstChild("ShootEvent")
if not ShootEvent then
    ShootEvent = Instance.new("RemoteEvent")
    ShootEvent.Name = "ShootEvent"
    ShootEvent.Parent = ReplicatedStorage
end

local RainbowSpeed = 5 -- Adjust speed of rainbow effect

local spreadFactor = 0 -- Recoil spread factor
local botNames = {} -- Store bot names

local player = Players.LocalPlayer
local tool = script.Parent
local remoteEvent = ReplicatedStorage:WaitForChild("ShotEvent")
local gunSound = tool.Handle:WaitForChild("Gun Shot")

local shooting = false
local fireRate = 0.05 -- seconds between shots; lower value means faster firing

-- Function to get aim position (for PC, using mouse; for mobile you might use camera direction or a custom GUI button)
local function getAimPosition()
    local mouse = player:GetMouse()
    return mouse.Hit.p  -- Adjust this if you use a different aiming method on mobile
end

-- Function that handles continuous firing
local function startShooting()
    if shooting then return end
    shooting = true
    spawn(function()
        while shooting do
            local aimPos = getAimPosition()
            remoteEvent:FireServer(tool, tool.Handle.Position, aimPos)
            gunSound:Play()
            wait(fireRate)
        end
    end)
end

local function stopShooting()
    shooting = false
end

-- Function to detect bots and assign names
local function detectAndAssignBot(player)
    if not player then return end

    if not botNames[player] then
        botNames[player] = player.Name -- Default to player name
    end

    if string.find(player.Name, "Bot") or string.find(player.Name, "AI") then
        botNames[player] = "AI-" .. tostring(math.random(1000, 9999))
        print("Detected bot: " .. botNames[player])
    end
end

local recoilIntensity = 5  -- degrees of upward recoil
local recoilTime = 0.1     -- time taken for recoil to apply

local function applyRecoil()
    local cam = workspace.CurrentCamera
    local recoilOffset = CFrame.Angles(math.rad(-recoilIntensity), 0, 0)
    local tweenInfo = TweenInfo.new(recoilTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(cam, tweenInfo, {CFrame = cam.CFrame * recoilOffset})
    tween:Play()
    -- You could then tween the camera back to normal for recovery
end

local function findClosestEnemy(shooter)
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= shooter and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (shooter.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = player.Character
            end
        end
    end
    
    return closestEnemy
end

-- Function to create ESP for enemies only
local function createESP(player)
    if not player or player == LocalPlayer then return end -- Ignore local player
    if player.Team == LocalPlayer.Team then return end -- Ignore teammates

    -- ESP Box and Line Drawing
    local Box = Drawing.new("Square")
    Box.Thickness = 2
    Box.Color = Color3.fromRGB(255, 0, 0) -- Red for enemies
    Box.Filled = false
    Box.Transparency = 1

    local Line = Drawing.new("Line")
    Line.Thickness = 2
    Line.Color = Color3.fromRGB(255, 0, 0) -- Red for enemies
    Line.Transparency = 1

    -- Function to apply enemy highlight (glow effect)
    local function applyHighlight()
        if player.Character and player.Team ~= LocalPlayer.Team then
            local highlight = player.Character:FindFirstChild("Highlight")
            if not highlight then
                highlight = Instance.new("Highlight")
                highlight.Parent = player.Character
                highlight.Adornee = player.Character
                highlight.FillTransparency = 0.1
                highlight.OutlineTransparency = 0
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            end

            -- Only apply to enemy team
            local hue = 0
            RunService.RenderStepped:Connect(function()
                if player and player.Character and highlight then
                    hue = (hue + 10) % 360
                    highlight.FillColor = Color3.fromHSV(hue / 360, 1, 1)
                    highlight.OutlineColor = Color3.fromHSV(hue / 360, 1, 1)
                end
            end)
        end
    end
    
    local function createESP()
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                local highlight = Instance.new("Highlight")
                highlight.Parent = part
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                highlight.OutlineColor = Color3.new(1, 0, 0) -- Default red, will change
                highlight.FillTransparency = 1 -- Only outline visible
                highlight.Adornee = part
                highlight.Name = "ESPHighlight"
                
                -- Animate color
                task.spawn(function()
                    local t = 0
                    while highlight.Parent and ESPEnabled do
                        highlight.OutlineColor = Color3.fromHSV(math.abs(math.sin(t * RainbowSpeed)), 1, 1)
                        t = t + RunService.RenderStepped:Wait()
                    end
                    if not ESPEnabled then
                        highlight:Destroy()
                    end
                end)
            end
        end
    end
end

createESP()

    -- Function to update ESP Box and Line
    local function updateESP()
        if not player.Character or player.Team == LocalPlayer.Team then
            Box.Visible = false
            Line.Visible = false
            return
        end

        local RootPart = player.Character:FindFirstChild("HumanoidRootPart")
        local Head = player.Character:FindFirstChild("Head")
        local Humanoid = player.Character:FindFirstChild("Humanoid")

        if RootPart and Head and Humanoid then
            local RootPosition, OnScreen1 = Camera:WorldToViewportPoint(RootPart.Position)
            local HeadPosition, OnScreen2 = Camera:WorldToViewportPoint(Head.Position)

            if OnScreen1 and OnScreen2 then
                -- Calculate ESP Box Size
                local BoxWidth = (Humanoid.HipHeight * 8) / RootPosition.Z
                local BoxHeight = (Humanoid.HipHeight * 14) / RootPosition.Z
                local BoxPosX = RootPosition.X - BoxWidth / 2
                local BoxPosY = RootPosition.Y - BoxHeight / 2

                -- Draw ESP Box
                Box.Size = Vector2.new(BoxWidth, BoxHeight)
                Box.Position = Vector2.new(BoxPosX, BoxPosY)
                Box.Visible = true

                -- Draw ESP Line (from bottom center of screen)
                Line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 50)
                Line.To = Vector2.new(RootPosition.X, RootPosition.Y + (BoxHeight / 2))
                Line.Visible = true
            else
                Box.Visible = false
                Line.Visible = false
            end
        end
    end

    -- Apply ESP only to enemies
    applyHighlight()
    RunService.RenderStepped:Connect(updateESP)

    player.CharacterAdded:Connect(function()
        task.wait(0.1)
        applyHighlight()
    end)
end

-- Function to find the closest enemy
local function getClosestEnemy()
    local closestEnemy = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Team ~= LocalPlayer.Team and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local enemyPosition = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            local distance = (Vector2.new(enemyPosition.X, enemyPosition.Y) - UserInputService:GetMouseLocation()).Magnitude

            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = player
            end
        end
    end
    return closestEnemy
end

-- Function to aim at the target with recoil spread
local function aimAtTarget()
    local target = getClosestEnemy()
    if target and target.Character and target.Character:FindFirstChild("Head") then
        local aimPosition = target.Character.Head.Position
        local direction = (aimPosition - Camera.CFrame.Position).unit

        -- Simulate recoil spread
        spreadFactor = math.min(spreadFactor + 0.02, 0.1)

        -- Apply spread
        direction = direction + Vector3.new(
            (math.random() - 0.5) * spreadFactor,
            (math.random() - 0.5) * spreadFactor,
            (math.random() - 0.5) * spreadFactor
        )

        -- Adjust Camera aim
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)
        print("Aiming at: " .. botNames[target] or target.Name .. " with spread: " .. spreadFactor)

        -- Reset spread gradually
        task.delay(0.5, function()
            spreadFactor = math.max(spreadFactor - 0.02, 0)
        end)
    end
end

-- Function to handle user input for aiming
local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        print("Mouse clicked, aiming at enemy.")
        aimAtTarget()
    end
end

UserInputService.InputBegan:Connect(onInputBegan)

local function findClosestEnemy(shooter)
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= shooter and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (shooter.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = player.Character
            end
        end
    end
    
    return closestEnemy
end

local function shootAtTarget(player, target)
    if target and target:FindFirstChild("HumanoidRootPart") then
        local targetPosition = target.HumanoidRootPart.Position
        for i = 1, 3 do -- Shoots multiple bullets per trigger
            local spread = Vector3.new(math.random(-2, 2) * 0.2, math.random(-2, 2) * 0.2, 0)
            local aimDirection = (targetPosition - player.Character.HumanoidRootPart.Position).Unit + spread
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {player.Character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            
            local rayResult = workspace:Raycast(player.Character.HumanoidRootPart.Position, aimDirection * 1000, raycastParams)
            
            if rayResult and rayResult.Instance and rayResult.Instance.Parent == target then
                target.Humanoid:TakeDamage(100) -- OP aimbot, high damage
            end
        end
    end
end

-- Function to manage player additions
local function onPlayerAdded(player)
    print("Player added: " .. player.Name)
    detectAndAssignBot(player)
    
    player:GetPropertyChangedSignal("Team"):Connect(function()
        createESP(player)
    end)

    player.CharacterAdded:Connect(function()
        task.wait(0.1)
        createESP(player)
    end)

    createESP(player)
end

-- Apply to all current Players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        onPlayerAdded(player)
    end
end

Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(function(player)
    print("Player removed: " .. player.Name)
    botNames[player] = nil -- Remove bot name entry
    if player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end)

-- Apply ESP to all enemy players
local function applyESPToEnemies()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Team ~= LocalPlayer.Team then
            createESP(player)
        end
    end
end

-- Detect new players joining and apply ESP if they are enemies
Players.PlayerAdded:Connect(function(player)
    player:GetPropertyChangedSignal("Team"):Connect(function()
        if player.Team ~= LocalPlayer.Team then
            createESP(player)
        end
    end)
end)

-- Apply ESP to all enemies at the start
applyESPToEnemies()

RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Team ~= LocalPlayer.Team and player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") then
            local healthTag = player.Character.Head:FindFirstChild("HealthTag")
            if not healthTag then
                healthTag = Instance.new("BillboardGui")
                healthTag.Name = "HealthTag"
                healthTag.Size = UDim2.new(2, 0, 0.2, 0)
                healthTag.StudsOffset = Vector3.new(0, 2, 0)
                healthTag.Adornee = player.Character.Head
                healthTag.Parent = player.Character.Head
                healthTag.AlwaysOnTop = true
                healthTag.MaxDistance = 10000

                local background = Instance.new("Frame", healthTag)
                background.Size = UDim2.new(1, 0, 1, 0)
                background.BackgroundColor3 = Color3.new(0, 0, 0)
                background.BorderSizePixel = 0

                local healthBar = Instance.new("Frame", background)
                healthBar.Name = "HealthBar"
                healthBar.Size = UDim2.new(1, 0, 1, 0)
                healthBar.BackgroundColor3 = Color3.new(0, 1, 0)
                healthBar.BorderSizePixel = 0
            end

            local humanoid = player.Character.Humanoid
            local healthBar = healthTag:FindFirstChild("Frame"):FindFirstChild("HealthBar")
            local healthPercentage = humanoid.Health / humanoid.MaxHealth
            
            healthBar.Size = UDim2.new(healthPercentage, 0, 1, 0)
            healthBar.BackgroundColor3 = Color3.fromRGB(255 * (1 - healthPercentage), 255 * healthPercentage, 0) 
        end
    end
end)

if RunService:IsServer() then
    -- SERVER CODE: This runs on Roblox’s server.
    ShootEvent.OnServerEvent:Connect(function(player, origin, direction, weaponData)
        -- Validate the shooting parameters.
        if typeof(origin) ~= "Vector3" or typeof(direction) ~= "Vector3" or typeof(weaponData) ~= "table" then
            warn("Invalid shooting parameters from " .. player.Name)
            return
        end

        -- Set up raycast parameters to ignore the shooter’s character.
        local raycastParams = RaycastParams.new()
        if player.Character then
            raycastParams.FilterDescendantsInstances = {player.Character}
        end
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.IgnoreWater = true

        -- Determine the shot’s range (default is 500 studs).
        local range = weaponData.range or 500
        local rayDirection = direction.Unit * range

        -- Perform the raycast.
        local result = workspace:Raycast(origin, rayDirection, raycastParams)
        if result then
            local hitPart = result.Instance
            local hitCharacter = hitPart:FindFirstAncestorWhichIsA("Model")
            if hitCharacter then
                local humanoid = hitCharacter:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local damage = weaponData.damage or 25

                    -- Optional: Double damage if it’s a headshot.
                    if hitPart.Name == "Head" then
                        damage = damage * 2
                    end

                    humanoid:TakeDamage(damage)
                    print(player.Name .. " hit " .. hitCharacter.Name .. " for " .. damage .. " damage.")
                end
            end
        end
    end)

elseif RunService:IsClient() then
    -- CLIENT CODE: This runs on the player's device (PC or mobile).
    local player = Players.LocalPlayer
    local camera = workspace.CurrentCamera

    -- Define the weapon's data.
    local weaponData = {
        damage = 25,
        range = 500,
    }

    -- Function to fire a shot using a screen position.
    local function fireShot(screenPos)
        if not player.Character or not player.Character:FindFirstChild("Head") then
            return
        end

        local origin = player.Character.Head.Position
        -- Convert the screen position to a ray from the camera.
        local ray = camera:ScreenPointToRay(screenPos.X, screenPos.Y)
        local direction = ray.Direction

        -- Fire the remote event to the server.
        ShootEvent:FireServer(origin, direction, weaponData)
    end

    -- Listen for both Mouse and Touch input.
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            fireShot(input.Position)
        end
    end)
end

-- Setup input events when the tool is equipped
tool.Equipped:Connect(function(mouse)
    -- PC support using mouse events:
    if not UserInputService.TouchEnabled then
        mouse.Button1Down:Connect(startShooting)
        mouse.Button1Up:Connect(stopShooting)
    else
        -- Mobile support: use InputBegan/Ended to detect touch
        local inputBeganConn, inputEndedConn
        inputBeganConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Touch then
                startShooting()
            end
        end)
        inputEndedConn = UserInputService.InputEnded:Connect(function(input, gameProcessed)
            if input.UserInputType == Enum.UserInputType.Touch then
                stopShooting()
            end
        end)
        tool.Unequipped:Connect(function()
            inputBeganConn:Disconnect()
            inputEndedConn:Disconnect()
        end)
    end
end)

tool.Unequipped:Connect(function()
    stopShooting()
end)

local reloadDelay = 1  -- set to a lower value for faster reload

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.R then
        -- play reload animation/sound
        reloadSound:Play()
        wait(reloadDelay)
        gun.Ammo.Value = clipSize  -- reset ammo count
    end
end)


-- Tool Glow Effect Loop
task.spawn(function()
    while true do
        task.wait(0.1)
        if LocalPlayer.Character then
            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if tool then
                local highlight = tool:FindFirstChild("Highlight")
                if not highlight then
                    highlight = Instance.new("Highlight")
                    highlight.Parent = tool
                    highlight.Adornee = tool
                    highlight.FillTransparency = 0.1
                    highlight.OutlineTransparency = 0
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                end
                local hue = tick() % 1
                highlight.FillColor = Color3.fromHSV(hue, 1, 1)
                highlight.OutlineColor = Color3.fromHSV(hue, 1, 1)
            end
        end
    end
end)
